// File: Book.java
import java.util.ArrayList;
import java.util.List;

public class Book implements Comparable<Book> {
    private String isbn;
    private String title;
    private Author author;
    private Publisher publisher;
    private boolean isAvailable;

    public Book(String isbn, String title, Author author, Publisher publisher) {
        this.isbn = isbn;
        this.title = title;
        this.author = author;
        this.publisher = publisher;
        this.isAvailable = true;
    }

    public String getIsbn() {
        return isbn;
    }

    public String getTitle() {
        return title;
    }

    public Author getAuthor() {
        return author;
    }

    public Publisher getPublisher() {
        return publisher;
    }

    public boolean isAvailable() {
        return isAvailable;
    }

    public void setAvailable(boolean available) {
        isAvailable = available;
    }

    public String getDetails() {
        return "ISBN: " + isbn + ", Title: " + title + ", Author: " + author.getName() +
               ", Publisher: " + publisher.getName() + ", Available: " + isAvailable;
    }

    @Override
    public int compareTo(Book other) {
        return this.getTitle().compareTo(other.getTitle());
    }
}

// File: Author.java
import java.util.ArrayList;
import java.util.List;

public class Author {
    private String id;
    private String name;
    private List<Book> books;

    public Author(String id, String name) {
        this.id = id;
        this.name = name;
        this.books = new ArrayList<>();
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public void addBook(Book book) {
        books.add(book);
    }

    public List<Book> getBooks() {
        return new ArrayList<>(books);
    }
}

// File: Publisher.java
import java.util.ArrayList;
import java.util.List;

public class Publisher {
    private String id;
    private String name;
    private List<Book> books;

    public Publisher(String id, String name) {
        this.id = id;
        this.name = name;
        this.books = new ArrayList<>();
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public void addBook(Book book) {
        books.add(book);
    }

    public List<Book> getBooks() {
        return new ArrayList<>(books);
    }
}

// File: Patron.java
import java.util.ArrayList;
import java.util.List;

public class Patron {
    private String id;
    private String name;
    private List<Book> borrowedBooks;
    private List<Reservation> reservations;
    private List<Fine> fines;

    public Patron(String id, String name) {
        this.id = id;
        this.name = name;
        this.borrowedBooks = new ArrayList<>();
        this.reservations = new ArrayList<>();
        this.fines = new ArrayList<>();
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public void borrowBook(Book book) {
        borrowedBooks.add(book);
        book.setAvailable(false);
    }

    public void returnBook(Book book) {
        borrowedBooks.remove(book);
        book.setAvailable(true);
    }

    public void addReservation(Reservation reservation) {
        reservations.add(reservation);
    }

    public void removeReservation(Reservation reservation) {
        reservations.remove(reservation);
    }

    public void addFine(Fine fine) {
        fines.add(fine);
    }

    public void removeFine(Fine fine) {
        fines.remove(fine);
    }

    public List<Book> getBorrowedBooks() {
        return new ArrayList<>(borrowedBooks);
    }

    public List<Reservation> getReservations() {
        return new ArrayList<>(reservations);
    }

    public List<Fine> getFines() {
        return new ArrayList<>(fines);
    }

    public String getDetails() {
        return "ID: " + id + ", Name: " + name + ", Borrowed Books: " + borrowedBooks.size() +
               ", Reservations: " + reservations.size() + ", Fines: " + fines.size();
    }
}

// File: Reservation.java
import java.util.Date;

public class Reservation {
    private String id;
    private Book book;
    private Patron patron;
    private Date reservationDate;

    public Reservation(String id, Book book, Patron patron) {
        this.id = id;
        this.book = book;
        this.patron = patron;
        this.reservationDate = new Date();
    }

    public String getId() {
        return id;
    }

    public Book getBook() {
        return book;
    }

    public Patron getPatron() {
        return patron;
    }

    public Date getReservationDate() {
        return reservationDate;
    }

    public void cancel() {
        patron.removeReservation(this);
    }
}

// File: Fine.java
public class Fine {
    private String id;
    private Patron patron;
    private double amount;
    private String reason;

    public Fine(String id, Patron patron, double amount, String reason) {
        this.id = id;
        this.patron = patron;
        this.amount = amount;
        this.reason = reason;
    }

    public String getId() {
        return id;
    }

    public Patron getPatron() {
        return patron;
    }

    public double getAmount() {
        return amount;
    }

    public String getReason() {
        return reason;
    }

    public void pay(double paymentAmount) {
        if (paymentAmount >= amount) {
            patron.removeFine(this);
        } else {
            amount -= paymentAmount;
        }
    }
}

// File: Library.java
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;

public class Library {
    private List<Book> books;
    private Map<String, Patron> patrons;
    private Inventory inventory;
    private List<LibraryEvent> events;
    private PriorityQueue<Reservation> reservations;

    public Library() {
        this.books = new ArrayList<>();
        this.patrons = new HashMap<>();
        this.inventory = new Inventory();
        this.events = new ArrayList<>();
        this.reservations = new PriorityQueue<>((r1, r2) -> r1.getReservationDate().compareTo(r2.getReservationDate()));
    }

    public void addBook(Book book) {
        books.add(book);
        inventory.addBook(book, 1);
    }

    public void removeBook(Book book) {
        books.remove(book);
        inventory.removeBook(book, 1);
    }

    public void addPatron(Patron patron) {
        patrons.put(patron.getId(), patron);
    }

    public void removePatron(String patronId) {
        patrons.remove(patronId);
    }

    public Book searchBook(String isbn) {
        for (Book book : books) {
            if (book.getIsbn().equals(isbn)) {
                return book;
            }
        }
        return null;
    }

    public Patron searchPatron(String id) {
        return patrons.get(id);
    }

    public void borrowBook(String patronId, String isbn) {
        Patron patron = searchPatron(patronId);
        Book book = searchBook(isbn);

        if (patron != null && book != null && book.isAvailable()) {
            patron.borrowBook(book);
            System.out.println("Book borrowed successfully.");
        } else {
            System.out.println("Unable to borrow the book. Please check patron ID and book availability.");
        }
    }

    public void returnBook(String patronId, String isbn) {
        Patron patron = searchPatron(patronId);
        Book book = searchBook(isbn);

        if (patron != null && book != null && patron.getBorrowedBooks().contains(book)) {
            patron.returnBook(book);
            System.out.println("Book returned successfully.");
        } else {
            System.out.println("Unable to return the book. Please check patron ID and borrowed books.");
        }
    }

    public void addEvent(LibraryEvent event) {
        events.add(event);
    }

    public List<Book> getBooks() {
        return new ArrayList<>(books);
    }

    public List<Patron> getPatrons() {
        return new ArrayList<>(patrons.values());
    }

    public List<LibraryEvent> getEvents() {
        return new ArrayList<>(events);
    }

    public Inventory getInventory() {
        return inventory;
    }

    public List<Book> searchBooksByTitle(String title) {
        List<Book> result = new ArrayList<>();
        for (Book book : books) {
            if (book.getTitle().toLowerCase().contains(title.toLowerCase())) {
                result.add(book);
            }
        }
        return result;
    }

    public void sortBooksByTitle() {
        Collections.sort(books);
    }

    public void addReservation(Reservation reservation) {
        reservations.offer(reservation);
    }

    public Reservation getNextReservation() {
        return reservations.poll();
    }
}

// File: Inventory.java
import java.util.HashMap;
import java.util.Map;

public class Inventory {
    private Map<String, Integer> books;

    public Inventory() {
        this.books = new HashMap<>();
    }

    public void addBook(Book book, int quantity) {
        books.put(book.getIsbn(), books.getOrDefault(book.getIsbn(), 0) + quantity);
    }

    public void removeBook(Book book, int quantity) {
        int currentQuantity = books.getOrDefault(book.getIsbn(), 0);
        if (currentQuantity > quantity) {
            books.put(book.getIsbn(), currentQuantity - quantity);
        } else {
            books.remove(book.getIsbn());
        }
    }

    public int getQuantity(Book book) {
        return books.getOrDefault(book.getIsbn(), 0);
    }
}

// File: LibraryEvent.java
import java.util.Date;

public class LibraryEvent {
    private String id;
    private String name;
    private Date date;
    private String description;

    public LibraryEvent(String id, String name, Date date, String description) {
        this.id = id;
        this.name = name;
        this.date = date;
        this.description = description;
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public Date getDate() {
        return date;
    }

    public String getDescription() {
        return description;
    }

    public String getDetails() {
        return "Event ID: " + id + ", Name: " + name + ", Date: " + date + ", Description: " + description;
    }
}

// File: SearchAlgorithms.java
import java.util.List;

public class SearchAlgorithms {
    public static int binarySearch(List<Book> books, String targetTitle) {
        int left = 0;
        int right = books.size() - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            int comparison = books.get(mid).getTitle().compareTo(targetTitle);

            if (comparison == 0) {
                return mid;
            } else if (comparison < 0) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return -1;
    }
}

// File: LibraryManager.java
import java.util.Scanner;
import java.util.List;

public class LibraryManager {
    private Library library;
    private UserInterface userInterface;

    public LibraryManager() {
        this.library = new Library();
        this.userInterface = new UserInterface();
        initializeLibrary();
    }

    private void initializeLibrary() {
        Author author1 = new Author("A001", "John Doe");
        Author author2 = new Author("A002", "Jane Smith");
        Publisher publisher1 = new Publisher("P001", "Tech Books Inc.");
        Publisher publisher2 = new Publisher("P002", "Literary Press");

        Book book1 = new Book("1234", "Java Programming", author1, publisher1);
        Book book2 = new Book("5678", "Data Structures", author2, publisher1);
        Book book3 = new Book("9012", "Great Novel", author2, publisher2);

        library.addBook(book1);
        library.addBook(book2);
        library.addBook(book3);

        library.addPatron(new Patron("P001", "Alice"));
        library.addPatron(new Patron("P002", "Bob"));
    }

    public void run() {
        boolean running = true;
        while (running) {
            userInterface.displayMenu();
            String choice = userInterface.getUserInput();

            switch (choice) {
                case "1":
                    addBook();
                    break;
                case "2":
                    removeBook();
                    break;
                case "3":
                    addPatron();
                    break;
                case "4":
                    removePatron();
                    break;
                case "5":
                    borrowBook();
                    break;
                case "6":
                    returnBook();
                    break;
                case "7":
                    searchBook();
                    break;
                case "8":
                    displayAvailableBooks();
                    break;
                case "9":
                    displayAllBooks();
                    break;
                case "10":
                    displayAllPatrons();
                    break;
                case "11":
                    generateReport();
                    break;
                case "12":
                    searchBookByTitle();
                    break;
                case "13":
                    sortAndSearchBook();
                    break;
                case "0":
                    running = false;
                    userInterface.displayMessage("Thank you for using the Library Management System. Goodbye!");
                    break;
                default:
                    userInterface.displayMessage("Invalid choice. Please try again.");
            }
        }
    }

    private void addBook() {
        userInterface.displayMessage("Enter book details:");
        String isbn = userInterface.getUserInput("ISBN: ");
        String title = userInterface.getUserInput("Title: ");
        String authorName = userInterface.getUserInput("Author Name: ");
        String publisherName = userInterface.getUserInput("Publisher Name: ");

        Author author = new Author("A" + System.currentTimeMillis(), authorName);
        Publisher publisher = new Publisher("P" + System.currentTimeMillis(), publisherName);
        Book book = new Book(isbn, title, author, publisher);

        library.addBook(book);
        userInterface.displayMessage("Book added successfully.");
    }

   private void removeBook() {
        String isbn = userInterface.getUserInput("Enter ISBN of the book to remove: ");
        Book book = library.searchBook(isbn);
        if (book != null) {
            library.removeBook(book);
            userInterface.displayMessage("Book removed successfully.");
        } else {
            userInterface.displayMessage("Book not found.");
        }
    }

    private void addPatron() {
        userInterface.displayMessage("Enter patron details:");
        String id = userInterface.getUserInput("Patron ID: ");
        String name = userInterface.getUserInput("Patron Name: ");

        Patron patron = new Patron(id, name);
        library.addPatron(patron);
        userInterface.displayMessage("Patron added successfully.");
    }

    private void removePatron() {
        String id = userInterface.getUserInput("Enter ID of the patron to remove: ");
        Patron patron = library.searchPatron(id);
        if (patron != null) {
            library.removePatron(id);
            userInterface.displayMessage("Patron removed successfully.");
        } else {
            userInterface.displayMessage("Patron not found.");
        }
    }

    private void borrowBook() {
        String patronId = userInterface.getUserInput("Enter patron ID: ");
        String isbn = userInterface.getUserInput("Enter ISBN of the book to borrow: ");
        library.borrowBook(patronId, isbn);
    }

    private void returnBook() {
        String patronId = userInterface.getUserInput("Enter patron ID: ");
        String isbn = userInterface.getUserInput("Enter ISBN of the book to return: ");
        library.returnBook(patronId, isbn);
    }

    private void searchBook() {
        String isbn = userInterface.getUserInput("Enter ISBN of the book to search: ");
        Book book = library.searchBook(isbn);
        if (book != null) {
            userInterface.displayMessage("Book found: " + book.getDetails());
        } else {
            userInterface.displayMessage("Book not found.");
        }
    }

    private void displayAvailableBooks() {
        userInterface.displayMessage("Available books:");
        for (Book book : library.getBooks()) {
            if (book.isAvailable()) {
                userInterface.displayMessage(book.getDetails());
            }
        }
    }

    private void displayAllBooks() {
        userInterface.displayMessage("All books:");
        for (Book book : library.getBooks()) {
            userInterface.displayMessage(book.getDetails());
        }
    }

    private void displayAllPatrons() {
        userInterface.displayMessage("All patrons:");
        for (Patron patron : library.getPatrons()) {
            userInterface.displayMessage(patron.getDetails());
        }
    }

    private void generateReport() {
        Report report = new Report(library);
        userInterface.displayMessage(report.generateSummaryReport());
    }

    private void searchBookByTitle() {
        String title = userInterface.getUserInput("Enter the title to search: ");
        List<Book> foundBooks = library.searchBooksByTitle(title);
        if (!foundBooks.isEmpty()) {
            userInterface.displayMessage("Books found:");
            for (Book book : foundBooks) {
                userInterface.displayMessage(book.getDetails());
            }
        } else {
            userInterface.displayMessage("No books found with the given title.");
        }
    }

    private void sortAndSearchBook() {
        library.sortBooksByTitle();
        String title = userInterface.getUserInput("Enter the exact title to search: ");
        int index = SearchAlgorithms.binarySearch(library.getBooks(), title);
        if (index != -1) {
            userInterface.displayMessage("Book found: " + library.getBooks().get(index).getDetails());
        } else {
            userInterface.displayMessage("Book not found.");
        }
    }

    public static void main(String[] args) {
        LibraryManager manager = new LibraryManager();
        manager.run();
    }
}

// File: UserInterface.java
import java.util.Scanner;

public class UserInterface {
    private Scanner scanner;

    public UserInterface() {
        this.scanner = new Scanner(System.in);
    }

    public void displayMenu() {
        System.out.println("\nLibrary Management System");
        System.out.println("1. Add Book");
        System.out.println("2. Remove Book");
        System.out.println("3. Add Patron");
        System.out.println("4. Remove Patron");
        System.out.println("5. Borrow Book");
        System.out.println("6. Return Book");
        System.out.println("7. Search Book by ISBN");
        System.out.println("8. Display Available Books");
        System.out.println("9. Display All Books");
        System.out.println("10. Display All Patrons");
        System.out.println("11. Generate Report");
        System.out.println("12. Search Book by Title");
        System.out.println("13. Sort Books and Search by Title");
        System.out.println("0. Exit");
        System.out.print("Enter your choice: ");
    }

    public String getUserInput() {
        return scanner.nextLine().trim();
    }

    public String getUserInput(String prompt) {
        System.out.print(prompt);
        return scanner.nextLine().trim();
    }

    public void displayMessage(String message) {
        System.out.println(message);
    }
}

// File: Report.java
import java.util.List;

public class Report {
    private Library library;

    public Report(Library library) {
        this.library = library;
    }

    public String generateSummaryReport() {
        StringBuilder report = new StringBuilder();
        report.append("Library Summary Report\n");
        report.append("----------------------\n");

        List<Book> books = library.getBooks();
        List<Patron> patrons = library.getPatrons();

        report.append("Total Books: ").append(books.size()).append("\n");
        report.append("Total Patrons: ").append(patrons.size()).append("\n");

        int availableBooks = 0;
        int borrowedBooks = 0;

        for (Book book : books) {
            if (book.isAvailable()) {
                availableBooks++;
            } else {
                borrowedBooks++;
            }
        }

        report.append("Available Books: ").append(availableBooks).append("\n");
        report.append("Borrowed Books: ").append(borrowedBooks).append("\n");

        return report.toString();
    }
}